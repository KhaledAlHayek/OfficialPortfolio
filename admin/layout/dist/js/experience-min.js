const expInputs=document.querySelectorAll(".setting .experience .exp .exp-input input"),submitBtn=document.querySelector(".setting .experience .exp .submit .submit-btn"),typeError=document.querySelector(".setting .experience .exp form .type-error"),nameError=document.querySelector(".setting .experience .exp form .exp-name-error"),placeError=document.querySelector(".setting .experience .exp form .place-error"),submit=document.querySelector(".experience .experience-list .the-experience .panel-body .submit-info .input-info input"),controlInput=(e,t,n)=>{e.forEach(e=>{e.addEventListener("input",r=>{let i=r.target.value.length;const s=e.nextElementSibling;i>0?(s.classList.add(n),e.classList.add(t)):(s.classList.remove(n),e.classList.remove(t))})})},validate=(e,t)=>{};Array.from(expInputs).forEach(e=>{e.addEventListener("input",t=>{let n=t.target.value.length;const r=e.nextElementSibling;n>0?(r.classList.add("control"),e.classList.add("has-value")):(e.classList.remove("has-value"),r.classList.remove("control"))})}),Array.from(expInputs).map(e=>{e.addEventListener("keyup",t=>{let n=t.target.value;const r=t.target.parentElement.nextElementSibling;n.match(/[a-zA-Z]{6,}(\W+)?(\s+)?/gi)?(e.classList.remove("has-error"),submitBtn.classList.remove("disabled"),r.innerHTML=""):(e.classList.add("has-error"),submitBtn.classList.add("disabled"),r.innerHTML="Information is not valid. Please give it another try.")})}),expInputs.forEach(e=>{const t=e.parentElement.querySelector("span");e.value.length>0?(t.classList.add("control"),e.classList.add("has-value")):(e.classList.remove("has-value"),t.classList.remove("control"))});const editExperienceCheckbox=document.querySelectorAll(".experience .experience-list .the-experience .panel-head .checkbox-exp"),experienceInfo=document.querySelectorAll(".experience .experience-list .the-experience");editExperienceCheckbox.forEach(e=>{e.addEventListener("change",e=>{removeCheck(),e.target.checked=!0;const t=e.target.closest(".the-experience");e.target.checked?(Array.from(experienceInfo).map(e=>{e.classList.remove("control-panels")}),t.classList.add("control-panels"),console.log("checked")):(console.log("not checked"),t.classList.remove("control-panels"))})});const removeCheck=()=>{editExperienceCheckbox.forEach(e=>{e.checked=!1})},editExperienceInputs=document.querySelectorAll(".experience .experience-list .the-experience .panel-body .input-info .main-input");controlInput(editExperienceInputs,"has-value","control-placeholder"),editExperienceInputs.forEach(e=>{const t=e.parentElement.querySelector("span");e.value.length>0?(t.classList.add("control-placeholder"),e.classList.add("has-value")):(e.classList.remove("has-value"),t.classList.remove("control-placeholder"))});const editDetails=document.querySelector(".experience .experience-list .the-experience .panel-body .project-details .add-new-experience-detail"),editDetailsContainer=document.querySelector(".experience .experience-list .the-experience .panel-body .project-details .details");let total=parseInt(editDetails.dataset.total);editDetails.addEventListener("click",()=>{newDetail(editDetailsContainer);document.querySelectorAll(".experience .experience-list .the-experience .panel-body .input-info .main-input")});const newDetail=e=>{e.innerHTML+=`\n    <div class="the-input">\n      <div class="input-info">\n        <input\n          type="text"\n          class="main-input"\n          name="detail-${++total}"\n          autocomplete="off"\n          required>\n        <span>Detail No. ${total}</span>\n      </div>\n    </div>\n  `},config={childList:!0,subtree:!0,attributes:!0},watch=(e,t)=>{for(const t of e)if("childList"===t.type){const e=document.querySelectorAll(".experience .experience-list .the-experience .panel-body .input-info .main-input");controlInput(e,"has-value","control-placeholder")}else"attributes"===t.type||console.log("subtree")},observer=new MutationObserver(watch);observer.observe(editDetailsContainer,config);